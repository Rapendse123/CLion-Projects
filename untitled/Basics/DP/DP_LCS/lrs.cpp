///*
//Longest Repeating Subsequence (LRS)
//PROBLEM STATEMENT:
//Given a string, find the length of the longest repeating subsequence such that
//the two subsequences don't have same string character at the same position, i.e.,
//any ith character in the two subsequences shouldn't have the same index in the original string.
//*/
//
//#include <bits/stdc++.h>
//
//#define int long long
//using namespace std;
//
//void printArray(int **dp, int n, int m) {
//    for (int i = 0; i < n + 1; ++i) {
//        for (int j = 0; j < m + 1; ++j) {
//            cout << dp[i][j] << " ";
//        }
//        cout << '\n';
//    }
//    cout << '\n';
//}
//
//int length_LCS_DP(string x, string y, int n, int m) {
//    // base condition
//    if (n == 0 || m == 0) {
//        return 0;
//    }
//
////    int dp[n + 1][m + 1];
//    int **dp = new int *[n + 1];
//
//    for (int i = 0; i < n + 1; i++) {
//        dp[i] = new int[m + 1];
//    }
//
//    // INITIALIZATION
//    // it corresponds to base condition in RECURSIVE SOLUTION
//    for (int i = 0; i < n + 1; i++) {
//        dp[i][0] = 0;
//    }
//
//    for (int j = 0; j < m + 1; j++) {
//        dp[0][j] = 0;
//    }
//
//    cout << "\nDP ARRAY BEFORE ITERATION:\n";
//    printArray(dp, n, m);
//
//    // ITERATIVE DP CODE
//    for (int i = 1; i < n + 1; i++) {
//        for (int j = 1; j < m + 1; j++) {
//            // choice diagram code
//            if (x[i - 1] == y[j - 1] && i != j) {     // [NOTE] : minor change
//                dp[i][j] = 1 + dp[i - 1][j - 1];
//            } else {
//                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]);
//            }
//        }
//    }
//
//    cout << "\nDP ARRAY AFTER ITERATION:\n";
//    printArray(dp, n, m);
//
//    return dp[n][m];
//}
//
//int lrs(string x) {
//    return length_LCS_DP(x, x, x.length(), x.length());
//}
//
//int32_t main() {
//    string x;
//    cin >> x;
//
//    cout << "Length of LRS is : " << lrs(x);
//    return 0;
//}
///*
//OUTPUT:
//
//Length of LRS is :
//DP ARRAY BEFORE ITERATION:
//0 0 0 0 0 0
//0 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587
//0 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587
//0 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587
//0 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587
//0 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587
//
//
//DP ARRAY AFTER ITERATION:
//0 0 0 0 0 0
//0 0 0 0 0 0
//0 0 0 1 1 1
//0 0 1 1 2 2
//0 0 1 2 2 2
//0 0 1 2 2 2
//
//2
//
//
//aabebcdd
//Length of LRS is :
//DP ARRAY BEFORE ITERATION:
//0 0 0 0 0 0 0 0 0
//0 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587
//0 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587
//0 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587
//0 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587
//0 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587
//0 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587
//0 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587
//0 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587 -4995072469926809587
//
//
//DP ARRAY AFTER ITERATION:
//0 0 0 0 0 0 0 0 0
//0 0 1 1 1 1 1 1 1
//0 1 1 1 1 1 1 1 1
//0 1 1 1 1 2 2 2 2
//0 1 1 1 1 2 2 2 2
//0 1 1 2 2 2 2 2 2
//0 1 1 2 2 2 2 2 2
//0 1 1 2 2 2 2 2 3
//0 1 1 2 2 2 2 3 3
//
//3
//*/