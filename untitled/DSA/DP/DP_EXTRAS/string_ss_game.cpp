/*
PROBLEM STATEMENT:
Given a string return all unique possible subsequences which start with vowel and end with consonant.
A String is a subsequence of a given String,
that is generated by deleting some character of a given string without changing its order.
NOTE: Return all the unique subsequences in lexicographically sorted order.
*/

#include <bits/stdc++.h>

#define int long long
using namespace std;

unordered_set<char> vowel = {'a', 'e', 'i', 'o', 'u'};
set<string> ans;

void print_ss(string &input, int i, string output) {
    if (vowel.find(output[0]) != vowel.end()
        && vowel.find(output[output.length() - 1]) == vowel.end()) {
        ans.insert(output);
    }
    if (i >= input.length()) {
        return;
    }

    for (int j = i; j < input.length(); j++) {
        output.push_back(input[j]);
        print_ss(input, j + 1, output);
        output.pop_back();
    }
}

set<string> solve(string input) {
    ans.clear();
    string output = "";
    print_ss(input, 0, output);
    return ans;
}

int32_t main() {
    cin.tie(nullptr);
    cout.tie(nullptr);
    ios_base::sync_with_stdio(false);

    int t;
    cin >> t;
    string input;

    while (t--) {
        cin >> input;
        if (ans.empty()) {
            cout << -1 << endl;
        } else {
            for (auto i : ans) {
                cout << i << " ";
            }
            cout << '\n';
        }
    }

    return 0;
}

/*
INPUT:
1
abc

OUTPUT:
ab abc ac
*/